{"version":3,"file":"kachi.mjs","sources":["../index.ts"],"sourcesContent":["import {\r\n    Block,\r\n    Pack,\r\n    Dict\r\n} from \"dalkak\";\r\n\r\nexport default new Pack(\r\n    new Dict,\r\n    \"kachi\", {\r\n        link: new Block(\r\n            new Dict,\r\n            \"link\",\r\n            \"변수(val)을(url)에 연결해 서버 만들기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                if (!Entry.variableContainer.getVariableByName(param.val)) {\r\n                    Entry.variableContainer.appendVariables([{\r\n                        name: param.val\r\n                    }]);\r\n                }\r\n                Entry.variableContainer.getVariableByName(param.val).setValue(new WebSocket(param.url));\r\n            }\r\n        ),\r\n        send: new Block(\r\n            new Dict,\r\n            \"send\",\r\n            \"서버(server)에(data)보내기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                var ws = Entry.variableContainer.getVariableByName(param.server).getValue();\r\n                if (ws.readyState == 0) {\r\n                    ws.onopen = () => {\r\n                        ws.send(param.data);\r\n                    }\r\n                } else {\r\n                    ws.send(param.data);\r\n                }\r\n            }\r\n        ),\r\n        ready: new Block(\r\n            new Dict,\r\n            \"ready\",\r\n            \"서버(server)과 신호(msg), 변수(val) 연결하기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                if (!Entry.variableContainer.messages_.find(x => x.name == param.msg)) {\r\n                    Entry.variableContainer.appendMessages([{\r\n                        name: param.msg\r\n                    }]);\r\n                }\r\n                if (!Entry.variableContainer.getVariableByName(param.val)) {\r\n                    Entry.variableContainer.appendVariables([{\r\n                        name: param.val\r\n                    }]);\r\n                }\r\n                var entMsg = Entry.variableContainer.messages_.find(x => x.name == param.msg);\r\n                Entry.variableContainer.getVariableByName(param.server).getValue().onmessage = event => {\r\n                    Entry.variableContainer.getVariableByName(param.val).setValue(event.data);\r\n                    Entry.engine.raiseMessage(entMsg.id);\r\n                };\r\n            }\r\n        )\r\n    }\r\n);"],"names":["Pack","Dict","link","Block","param","info","Entry","data","variableContainer","getVariableByName","val","appendVariables","name","setValue","WebSocket","url","send","ws","server","getValue","readyState","onopen","ready","messages_","find","x","msg","appendMessages","entMsg","onmessage","event","engine","raiseMessage","id"],"mappings":"mDAMA,UAAmBA,EACf,IAAIC,EACJ,QAAS,CACLC,KAAM,IAAIC,EACN,IAAIF,EACJ,OACA,4BACA,SAACG,EAAOC,GACJ,IAAIC,EAASD,EAEVE,KAAKD,MACHA,EAAME,kBAAkBC,kBAAkBL,EAAMM,MACjDJ,EAAME,kBAAkBG,gBAAgB,CAAC,CACrCC,KAAMR,EAAMM,OAGpBJ,EAAME,kBAAkBC,kBAAkBL,EAAMM,KAAKG,SAAS,IAAIC,UAAUV,EAAMW,QAG1FC,KAAM,IAAIb,EACN,IAAIF,EACJ,OACA,uBACA,SAACG,EAAOC,GACJ,IAGIY,EAHSZ,EAEVE,KAAKD,MACOE,kBAAkBC,kBAAkBL,EAAMc,QAAQC,WAC5C,GAAjBF,EAAGG,WACHH,EAAGI,OAAS,WACRJ,EAAGD,KAAKZ,EAAMG,OAGlBU,EAAGD,KAAKZ,EAAMG,QAI1Be,MAAO,IAAInB,EACP,IAAIF,EACJ,QACA,oCACA,SAACG,EAAOC,GACJ,IAAIC,EAASD,EAEVE,KAAKD,MACHA,EAAME,kBAAkBe,UAAUC,KAAK,SAAAC,UAAKA,EAAEb,MAAQR,EAAMsB,OAC7DpB,EAAME,kBAAkBmB,eAAe,CAAC,CACpCf,KAAMR,EAAMsB,OAGfpB,EAAME,kBAAkBC,kBAAkBL,EAAMM,MACjDJ,EAAME,kBAAkBG,gBAAgB,CAAC,CACrCC,KAAMR,EAAMM,OAGpB,IAAIkB,EAAStB,EAAME,kBAAkBe,UAAUC,KAAK,SAAAC,UAAKA,EAAEb,MAAQR,EAAMsB,MACzEpB,EAAME,kBAAkBC,kBAAkBL,EAAMc,QAAQC,WAAWU,UAAY,SAAAC,GAC3ExB,EAAME,kBAAkBC,kBAAkBL,EAAMM,KAAKG,SAASiB,EAAMvB,MACpED,EAAMyB,OAAOC,aAAaJ,EAAOK"}